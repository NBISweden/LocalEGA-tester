import os
import secrets
import string
import sys
import logging
from legacryptor.crypt4gh import Header, get_header
import pgpy
import argparse
import yaml
import time
from .utils import download_to_file, compare_files
from .archive_ops import list_s3_objects
from .db_ops import get_last_id, get_file_status, file2dataset_map
from .mq_ops import submit_cega, get_corr
from .inbox_ops import encrypt_file, open_ssh_connection, sftp_upload


FORMAT = '[%(asctime)s][%(name)s][%(process)d %(processName)s][%(levelname)-8s] (L:%(lineno)s) %(funcName)s: %(message)s'
logging.basicConfig(format=FORMAT, datefmt='%Y-%m-%d %H:%M:%S')
LOG = logging.getLogger(__name__)
# By default the logging level would be INFO
log_level = os.environ.get('DEFAULT_LOG', 'INFO').upper()
LOG.setLevel(log_level)


def main():
    """Do the sparkles and fireworks."""
    parser = argparse.ArgumentParser(description="M4 end to end test with YAML configuration.")

    # Should we do this in a configuration file ?
    parser.add_argument('input', help='File to be uploaded.')
    parser.add_argument('config', help='Configuration file.')

    args = parser.parse_args()
    used_file = os.path.expanduser(args.input)
    filename, _ = os.path.splitext(used_file)
    config_file = os.path.expanduser(args.config)
    output_base = os.path.basename(filename)
    with open(config_file, 'r') as stream:
        try:
            config_file = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            LOG.error(exc)

    # Initialise what is needed

    res_file = f'{filename}.res'
    dataedge_file = f'{filename}.dataedge'
    config = config_file['localega']
    key_pk = os.path.expanduser(config['user_key'])
    pub_key, _ = pgpy.PGPKey.from_file(os.path.expanduser(config['encrypt_key_public']))
    sec_key, _ = pgpy.PGPKey.from_file(config['encrypt_key_private'])
    session_key = ''
    iv = ''
    fileID = ''
    token = config['token']
    cm_protocol = 'amqps' if config['cm_ssl'] else 'amqp'

    test_user = config['user']
    # TEST Connection before anything
    open_ssh_connection(config['inbox_address'], test_user, key_pk, port=int(config['inbox_port']))
    # Get current id from database
    current_id = get_last_id(config['db_in_user'], config['db_name'], config['db_in_pass'], config['db_address'])
    LOG.debug(f'Current last DB id {current_id}')
    # Encrypt File
    test_file, c4ga_md5 = encrypt_file(used_file, pub_key)
    # Retrieve session_key and IV to test RES
    with sec_key.unlock(config['encrypt_key_pass']) as privkey:
        header = Header.decrypt(get_header(open(test_file, 'rb'))[1], privkey)
        session_key = header.records[0].session_key.hex()
        iv = header.records[0].iv.hex()
    # Stable ID is mocked this should be generated by CentralEGA
    stableID = 'EGAF'+''.join(secrets.choice(string.digits) for i in range(16))
    if c4ga_md5:
        sftp_upload(config['inbox_address'], test_user, test_file, key_pk, port=int(config['inbox_port']))
        correlation_id = get_corr(cm_protocol, config['cm_address'], config['cm_user'],
                                  config['cm_vhost'], 'v1.files.inbox', f'{output_base}.c4ga', config['cm_pass'],
                                  port=config['cm_port'])
        submit_cega(cm_protocol, config['cm_address'], config['cm_user'], config['cm_vhost'],
                    {'user': test_user, 'filepath': f'{output_base}.c4ga'}, 'files',
                    config['cm_pass'], correlation_id, port=config['cm_port'])
        # Once the file has been ingested it should be the last ID in the database
        # We use this ID everywhere including donwload from DataEdge
        # In future versions once we fix DB schema we will use StableID for download
        fileID = 0
        while (fileID <= current_id):
            time.sleep(1)
            fileID = get_last_id(config['db_in_user'], config['db_name'],
                                 config['db_in_pass'], config['db_address'])
        # wait for submission to go through
        get_corr(cm_protocol, config['cm_address'], config['cm_user'],
                 config['cm_vhost'], 'v1.files.completed', f'{output_base}.c4ga', config['cm_pass'],
                 port=config['cm_port'])
        # Wait for file status
        status = ''
        while (status != 'COMPLETED'):
            time.sleep(1)
            status = get_file_status(config['db_in_user'], config['db_name'],
                                     config['db_in_pass'], config['db_address'],
                                     fileID)

        # Stable ID should be sent by CentralEGA
        submit_cega(cm_protocol, config['cm_address'], config['cm_user'], config['cm_vhost'],
                    {'file_id': fileID, 'stable_id': stableID}, 'stableIDs',
                    config['cm_pass'], correlation_id, port=config['cm_port'])
        list_s3_objects(config['s3_address'], config['s3_bucket'],
                        config['s3_region'], fileID,
                        config['s3_access'], config['s3_secret'])
    LOG.debug('Ingestion DONE')
    LOG.debug('-------------------------------------')
    # Verify that the file can be downloaded from RES using the session_key and IV
    res_payload = {'sourceKey': session_key, 'sourceIV': iv, 'filePath': fileID}
    res_url = f"http://{config['res_address']}:{config['res_port']}/file"
    download_to_file(res_url, res_payload, res_file)
    compare_files('RES', res_file, used_file)

    LOG.debug('Mapping file to dataset for retrieving file via dataedge.')

    # There is no component asigning permissions for files in datasets
    # Thus we need this step
    # for now this dataset ID is fixed to 'EGAD01' as we have it like this in the TOKEN
    # Will need updating once we decide on the permissions handling
    file2dataset_map(config['db_out_user'], config['db_name'],
                     config['db_out_pass'], config['db_address'],
                     fileID, 'EGAD01')

    # Verify that the file can be downloaded from DataEdge
    # We are using a token that can be validated by DataEdge
    edge_payload = {'destinationFormat': 'plain'}
    edge_headers = {'Authorization': f'Bearer {token}'}  # No token no permissions
    dataedge_url = f"http://{config['dataedge_address']}:{config['dataedge_port']}/files/{stableID}"
    download_to_file(dataedge_url, edge_payload, dataedge_file, headers=edge_headers)
    compare_files('DataEdge', dataedge_file, used_file)

    LOG.debug('Outgestion DONE')
    LOG.debug('-------------------------------------')
    LOG.info('Should be all!')


if __name__ == '__main__':
    assert sys.version_info >= (3, 6), "M4 end to end test requires python3.6"
    main()
